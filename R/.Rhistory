View(AIC_res)
?aplly
?lapply
debugSource('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/descriptives.R', echo=TRUE)
View(AIC_res)
View(res)
debugSource('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/descriptives.R', echo=TRUE)
View(AIC_res)
# Function
est_Par <- function(list){
res <- as.data.frame(matrix(ncol = 4+3+3, nrow = length(list)))
index_name <- vector()
# Information Criteria result matrices
AIC_res <- as.data.frame(matrix(ncol = 3))
BIC_res <- as.data.frame(matrix(ncol = 3))
HQC_res <- as.data.frame(matrix(ncol = 3))
ic_names <- c("Index","Skew-Normal","Skew-t","Skew-Cauchy")
# Information criteria functions
AIC <- function(optim){2*optim$value+2*length(optim$par)}
BIC <- function(optim,ts){2*optim$value+length(optim$par)*log(length(ts))}
HQC <- function(optim,ts){2*optim$value+2*length(optim$par)*log(log(length(ts)))}
for(i in 1:length(list)){
index_name <- append(index_name,names(list)[i])
sno <- optim(p0_1,
sn_llik,
data = list[[i]],
method = "N",
control = list(maxit = 1000))
sto <- optim(p0_2,
st_llik,
data = list[[i]],
method = "N",
control = list(maxit = 1000))
sco <- optim(p0_1,
sc_llik,
data = list[[i]],
method = "N",
control = list(maxit = 1000))
res[i,] <- c(sno$par,
sto$par,
sco$par)
# Information Criteria
# AIC
AIC_res <- rbind(AIC_res, c(AIC(sno), AIC(sto), AIC(sco)))
BIC_res <- rbind(BIC_res, c(BIC(sno,list[[i]]), BIC(sto,list[[i]]), BIC(sco, list[[i]])))
HQC_res <- rbind(HQC_res, c(HQC(sno,list[[i]]), HQC(sto, list[[i]]), HQC(sco,list[[i]])))
}
# Bind names vector to the Indices
AIC_res <- cbind(index_name,AIC_res[-1,])
BIC_res <- cbind(index_name,BIC_res[-1,])
HQC_res <- cbind(index_name,HQC_res[-1,])
# Name columns
names(AIC_res) <- ic_names
names(BIC_res) <- ic_names
names(HQC_res) <- ic_names
res <- cbind(index_name,res)
names(res) <- c("Index", "Location (Norm)","Scale (Norm)","Skew (Norm)",
"Location (t)","Scale (t)","Skew (t)","df(t)",
"Location (Cauchy)","Scale (Cauchy)","Skew (Cauchy)")
res_list <- list(Estimates = res, InformationCriteria = list(AIC = AIC_res,BIC = BIC_res,HQC = HQC_res))
res_list
}
a <- est_Par(diff_list)
View(a)
# Source the import and pre-transformations file.
source("~/Dropbox/Uni/Masterarbeit/Master_thesis/R/import_pre-transforms.R",echo = F)
plot(Acf(ts_list[[1]]))
plot(Acf(diff_list[[1]]))
?Acf
plot(Acf(diff_list[[1]]), main = "Hi")
plot(forecast::Acf(diff_list[[1]]), main = "Hi")
plot(forecast::Acf(diff_list[[1]], plot = F), main = "Hi")
plot(acf(diff_list[[1]], plot = F), main = "Hi")
plot(acf(diff_list[[1]], plot = F), main = "Hi", ylim = .2)
plot(acf(diff_list[[1]], plot = F), main = "Hi", ylim = c(-.2,.2))
?pdf
names(diff_list[[1]])
View(diff_list)
names(diff_list)
test <- arima(diff_list[[1]], order = c(1,0,1))
View(test)
?forecast
forecast(test, h = 60)
autoplot(forecast(test, h = 60))
hist(rnorm(1000))
hist(pnorm(rnorm(1000)))
hist(pnorm(rnorm(1000)))
hist(pnorm(rnorm(1000)))
hist(pnorm(rnorm(1000)))
hist(pnorm(rnorm(1000)))
hist(pnorm(rnorm(1000)))
hist(pnorm(rnorm(1000)))
plot(pnorm(rnorm(1000)))
qqnorm(pnorm(rnorm1000))
qqnorm(pnorm(rnorm(1000)))
.libPaths()
install.packages("rugarch")
install.packages("rugarch")
library(rugarch)
# Install the core Keras library + TensorFlow
library(keras)
model <- keras_model_sequential()
erm(model)
rm(model)
library(rurugarch)
library(rugarch)
?ugarchboot
con <- url("https://bookdown.org/rdpeng/rprogdatascience/interfaces-to-the-outside-world.html", "r")0
con <- url("http://bookdown.org/rdpeng/rprogdatascience/interfaces-to-the-outside-world.html", "r")0
con <- url("https://bookdown.org/rdpeng/rprogdatascience/interfaces-to-the-outside-world.html", "r")
x <- readLines(con)
head x
head(x)
seach()
search()
search(base)
x
con <- url("https://de.wikipedia.org", "r")
x <- readLines(con)
head(x)
search(
)
library(languageserver)
languageserver::run()
# Load relevant packages and install them if not already done.
list_of_packages <- c("moments",
"tidyverse",
"lubridate",
"zoo",
"stats",
"aTSA",
"sn",
"forecast",
"parallel",
"foreach",
"keras",
"tfestimators",
"tfruns",
"rsample",
"recipes",
"extrafont")
# Recursive load of packages
invisible(
lapply(list_of_packages, library, character.only = T)
)
# Detect the number of cores on your system to enable multi-core processing.
# Last core is omitted to prevent system freeze during exec.
mc_cores <- detectCores() - 1
############ ONLY FOR R-STUDIO USERS ##################
#
# If you use RStudio you need to set the working dir to the file path
# to enable relative paths.
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Create new environment to source the helper functions into.
# This avoids the .GlobalEnv to get too crowded.
funcEnv <- new.env()
# Vector with paths to the files to be sourced.
script_sources <- c("./import_pre-transforms.R",
"./descriptives.R",
"./auxf/helper.R",
"./exp_smoothing.R",
"./auxf/plotting.R",
"./ARIMA.R")
# Source the functions and variables into the funcEnv
invisible(lapply(script_sources, source, local = funcEnv))
# Attach the environment to the search path
attach(funcEnv)
# Tidy up
rm(funcEnv, list_of_packages, script_sources)
# Global forecast horizon
OUT_SAMPLE <- 7
######################################################################
#                         ARIMA
######################################################################
b = lapply(ts_list,log)
# Training and testing sets for ARIMA estimation
train_test_arima <- make_training_and_testing_sets(
b,
OUT_SAMPLE
)
# Estimation of up to ARMA(7,7)
auto_arima_list <- list_Auto_Arima(
b,
crit = "bic",
parallel = T,
n.cores = mc_cores,
out.sample = OUT_SAMPLE
)
# Function for finding the best ARIMA model based on some information
# criterion.
#
# Basically just a wrapper for the forecast::auto.arima function with added list capability.
#
# (Compilation Time: 1 minute for ~14*1200 obs. on 16 cores)
list_Auto_Arima <- function(list,out.sample = 30,crit = c("aicc","aic","bic"), parallel = F, n.cores = 2) {
# Result list
res <- list()
for (entry in 1:length(list)) {
cat(paste0("Calculating ", names_complete[entry], "\n"))
# Define training sets
train <- head(list[[entry]], -out.sample)
res[[entry]] <- forecast::auto.arima(train, d = 1, D = 0,
max.p = 12,
max.q = 12,
max.order = 24,
max.d = 1, max.D = 0,
stationary = F,
seasonal = F,
stepwise = F,
approximation = F,
allowdrift = F,
allowmean = F,
parallel = parallel,
num.cores = n.cores)
}
names(res) <- names_complete
class(res) <- "autoArimaList"
res
}
# Estimation of up to ARMA(7,7)
auto_arima_list <- list_Auto_Arima(
b,
crit = "bic",
parallel = T,
n.cores = mc_cores,
out.sample = OUT_SAMPLE
)
# Write the ARIMA orders into a data frame.
get_orders_from_arima_fit <- function(arimaFITorList) {
if(class(arimaFITorList) == "autoArimaList"){
resdf <- data.frame(matrix(nrow = length(arimaFITorList),
ncol = 3))
for(entry in 1:length(arimaFITorList)){
resdf[entry,c(2,3)] <- arimaFITorList[[entry]][["arma"]][1:2]
}
resdf[,1] <- names_complete
names(resdf) <- c("Index","AR(p)","MA(q)")
}
else{
resdf <- arimaFITorList[["arma"]][c(1,2)]
names(resdf) <- c("AR(p)","MA(q)")
}
return(resdf)
}
# Extract the orders of the fitted arima models
arma_orders <- get_orders_from_arima_fit(auto_arima_list)
View(arma_orders)
# Estimation of up to ARMA(7,7)
auto_arima_list_aicc <- list_Auto_Arima(
b,
crit = "aicc",
parallel = T,
n.cores = mc_cores,
out.sample = OUT_SAMPLE
)
arma_orders_aicc <- get_orders_from_arima_fit(auto_arima_list_aicc)
View(arma_orders_aicc)
View(arma_orders)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
# Forecast the ARIMA models based on their respective models
arima_forecast <- mclapply(
auto_arima_list, forecast,
h = OUT_SAMPLE,
mc.cores = mc_cores
)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
?legend
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast"
)
