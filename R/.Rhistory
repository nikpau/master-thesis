start = length(nnPrediction[[i]]$train)-8,
end = nnPrediction[[i]]$train)
trans_forc <- ts(c(tail(series,1), head(forc,1)),
start = length(nnPrediction[[i]]$train)-8,
end = nnPrediction[[i]]$train)
plot(
series,
type = "b",
lty = 1,
pch = 18,
frame = F,
lwd = 2,
xlab = "Index",
ylab = "Series",
col = "#002B36",
ylim = c(miny(series,test), maxy(series,test)),
xlim = c(length(nnPrediction[[i]]$train) - window,
length(nnPrediction[[i]]$train)),
main = paste0(names_complete[i], " ", length(test), " days ahead")
)
abline(v = length(nnPrediction[[i]]$train), lwd  = 2)
add_lines(forc, trans_forc, test, trans_true)
}
}
debugonce(plot_save_nn)
plot_save_nn(predict_everything, 50)
ts(c(tail(series,1), head(test,1)),
start = length(nnPrediction[[i]]$train)-8,
end = nnPrediction[[i]]$train)
# Plotting function for the neural networks
plot_save_nn <- function(nnPrediction, window) {
for (i in seq_len(length(nnPrediction))) {
series <- nnPrediction[[i]]$train %>%
ts(start = 1, end = length(nnPrediction[[i]]$train)) %>%
tail(window)
forc <-  nnPrediction[[i]]$forc %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
test <-  nnPrediction[[i]]$test %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
trans_true <- ts(c(tail(series,1), head(test,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train + 1))
trans_forc <- ts(c(tail(series,1), head(forc,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train + 1))
plot(
series,
type = "b",
lty = 1,
pch = 18,
frame = F,
lwd = 2,
xlab = "Index",
ylab = "Series",
col = "#002B36",
ylim = c(miny(series,test), maxy(series,test)),
xlim = c(length(nnPrediction[[i]]$train) - window,
length(nnPrediction[[i]]$train)),
main = paste0(names_complete[i], " ", length(test), " days ahead")
)
abline(v = length(nnPrediction[[i]]$train), lwd  = 2)
add_lines(forc, trans_forc, test, trans_true)
}
}
debugonce(plot_save_nn)
plot_save_nn(predict_everything, 50)
tail(series,1)
p <- c(tail(series,1), head(forc,1))
# Plotting function for the neural networks
plot_save_nn <- function(nnPrediction, window) {
for (i in seq_len(length(nnPrediction))) {
series <- nnPrediction[[i]]$train %>%
ts(start = 1, end = length(nnPrediction[[i]]$train)) %>%
tail(window)
forc <-  nnPrediction[[i]]$forc %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
test <-  nnPrediction[[i]]$test %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
trans_true <- ts(c(tail(series,1), head(test,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) +1)
trans_forc <- ts(c(tail(series,1), head(forc,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) + 1)
plot(
series,
type = "b",
lty = 1,
pch = 18,
frame = F,
lwd = 2,
xlab = "Index",
ylab = "Series",
col = "#002B36",
ylim = c(miny(series,test), maxy(series,test)),
xlim = c(length(nnPrediction[[i]]$train) - window,
length(nnPrediction[[i]]$train)),
main = paste0(names_complete[i], " ", length(test), " days ahead")
)
abline(v = length(nnPrediction[[i]]$train), lwd  = 2)
add_lines(forc, trans_forc, test, trans_true)
}
}
debugonce(plot_save_nn)
plot_save_nn(predict_everything, 50)
# Plotting function for the neural networks
plot_save_nn <- function(nnPrediction, window) {
for (i in seq_len(length(nnPrediction))) {
series <- nnPrediction[[i]]$train %>%
ts(start = 1, end = length(nnPrediction[[i]]$train)) %>%
tail(window)
forc <-  nnPrediction[[i]]$forc %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
test <-  nnPrediction[[i]]$test %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
trans_true <- ts(c(tail(series,1), head(test,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) +1)
trans_forc <- ts(c(tail(series,1), head(forc,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) + 1)
plot(
series,
type = "b",
lty = 1,
pch = 18,
frame = F,
lwd = 2,
xlab = "Index",
ylab = "Series",
col = "#002B36",
ylim = c(miny(series,test), maxy(series,test)),
xlim = c(length(nnPrediction[[i]]$train) - window,
length(nnPrediction[[i]]$train) + length(nnPrediction[[i]]$forc)),
main = paste0(names_complete[i], " ", length(nnPrediction[[i]]$forc), " days ahead")
)
abline(v = length(nnPrediction[[i]]$train), lwd  = 2)
add_lines(forc, trans_forc, test, trans_true)
}
}
debugonce(plot_save_nn)
plot_save_nn(predict_everything, 50)
debugonce(plot_save_nn)
plot_save_nn(predict_everything, 30)
# Plotting function for the neural networks
plot_save_nn <- function(nnPrediction, window) {
for (i in seq_len(length(nnPrediction))) {
series <- nnPrediction[[i]]$train %>%
ts(start = 1, end = length(nnPrediction[[i]]$train)) %>%
tail(window)
forc <-  nnPrediction[[i]]$forc %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
test <-  nnPrediction[[i]]$test %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
trans_true <- ts(c(tail(series,1), head(test,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) +1)
trans_forc <- ts(c(tail(series,1), head(forc,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) + 1)
plot(
series,
type = "b",
lty = 1,
pch = 18,
frame = F,
lwd = 2,
xlab = "Index",
ylab = "Series",
col = "#002B36",
ylim = c(miny(series,test), maxy(series,test)),
xlim = c(length(nnPrediction[[i]]$train) - window,
length(nnPrediction[[i]]$train) + length(nnPrediction[[i]]$forc)),
main = paste0(names_complete[i], " ", length(nnPrediction[[i]]$forc), " days ahead")
)
abline(v = length(nnPrediction[[i]]$train), lwd  = 2)
add_lines(forc, trans_forc, test, trans_true)
grid()
plot_legend()
}
}
debugonce(plot_save_nn)
plot_save_nn(predict_everything, 30)
debugonce(plot_save_nn)
plot_save_nn(predict_everything, 20)
# Plotting function for the neural networks
plot_save_nn <- function(nnPrediction, window, type) {
for (i in seq_len(length(nnPrediction))) {
series <- nnPrediction[[i]]$train %>%
ts(start = 1, end = length(nnPrediction[[i]]$train)) %>%
tail(window)
forc <-  nnPrediction[[i]]$forc %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
test <-  nnPrediction[[i]]$test %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
trans_true <- ts(c(tail(series,1), head(test,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) +1)
trans_forc <- ts(c(tail(series,1), head(forc,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) + 1)
if (type == "lstm")
path <- "./img/ann_forecast/lstm/"
ending <- paste0(names_complete[i], "_lstm_forecast.pdf")
else
path <- "./img/ann_forecast/mlp/"
ending <- paste0(names_complete[i], "_mlp_forecast.pdf")
pdf(file = paste0(path,ending),
height = 5)
plot(
series,
type = "b",
lty = 1,
pch = 18,
frame = F,
lwd = 2,
xlab = "Index",
ylab = "Series",
col = "#002B36",
ylim = c(miny(series,test), maxy(series,test)),
xlim = c(length(nnPrediction[[i]]$train) - window,
length(nnPrediction[[i]]$train) + length(nnPrediction[[i]]$forc)),
main = paste0(names_complete[i], " ", length(nnPrediction[[i]]$forc), " days ahead")
)
abline(v = length(nnPrediction[[i]]$train), lwd  = 2)
add_lines(forc, trans_forc, test, trans_true)
grid()
plot_legend()
dev.off()
}
}
# Plotting function for the neural networks
plot_save_nn <- function(nnPrediction, window, type) {
for (i in seq_len(length(nnPrediction))) {
series <- nnPrediction[[i]]$train %>%
ts(start = 1, end = length(nnPrediction[[i]]$train)) %>%
tail(window)
forc <-  nnPrediction[[i]]$forc %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
test <-  nnPrediction[[i]]$test %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
trans_true <- ts(c(tail(series,1), head(test,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) +1)
trans_forc <- ts(c(tail(series,1), head(forc,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) + 1)
if (type == "lstm")
path <- "./img/ann_forecast/lstm/"
ending <- paste0(names_complete[i], "_lstm_forecast.pdf")
else
path <- "./img/ann_forecast/mlp/"
ending <- paste0(names_complete[i], "_mlp_forecast.pdf")
pdf(file = paste0(path,ending),
height = 5)
plot(
series,
type = "b",
lty = 1,
pch = 18,
frame = F,
lwd = 2,
xlab = "Index",
ylab = "Series",
col = "#002B36",
ylim = c(miny(series,test), maxy(series,test)),
xlim = c(length(nnPrediction[[i]]$train) - window,
length(nnPrediction[[i]]$train) + length(nnPrediction[[i]]$forc)),
main = paste0(names_complete[i], " ", length(nnPrediction[[i]]$forc), " days ahead")
)
abline(v = length(nnPrediction[[i]]$train), lwd  = 2)
add_lines(forc, trans_forc, test, trans_true)
grid()
plot_legend()
dev.off()
}
}
# Plotting function for the neural networks
plot_save_nn <- function(nnPrediction, window, type) {
for (i in seq_len(length(nnPrediction))) {
series <- nnPrediction[[i]]$train %>%
ts(start = 1, end = length(nnPrediction[[i]]$train)) %>%
tail(window)
forc <-  nnPrediction[[i]]$forc %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
test <-  nnPrediction[[i]]$test %>%
ts(start = length(nnPrediction[[i]]$train) + 1,
end = length(nnPrediction[[i]]$train) + 1 + length(nnPrediction[[i]]$forc))
trans_true <- ts(c(tail(series,1), head(test,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) +1)
trans_forc <- ts(c(tail(series,1), head(forc,1)),
start = length(nnPrediction[[i]]$train),
end = length(nnPrediction[[i]]$train) + 1)
if (type == "lstm") {
path <- "./img/ann_forecast/lstm/"
ending <- paste0(names_complete[i], "_lstm_forecast.pdf")
}
else {
path <- "./img/ann_forecast/mlp/"
ending <- paste0(names_complete[i], "_mlp_forecast.pdf")
}
pdf(file = paste0(path,ending),
height = 5)
plot(
series,
type = "b",
lty = 1,
pch = 18,
frame = F,
lwd = 2,
xlab = "Index",
ylab = "Series",
col = "#002B36",
ylim = c(miny(series,test), maxy(series,test)),
xlim = c(length(nnPrediction[[i]]$train) - window,
length(nnPrediction[[i]]$train) + length(nnPrediction[[i]]$forc)),
main = paste0(names_complete[i], " ", length(nnPrediction[[i]]$forc), " days ahead")
)
abline(v = length(nnPrediction[[i]]$train), lwd  = 2)
add_lines(forc, trans_forc, test, trans_true)
grid()
plot_legend()
dev.off()
}
}
plot_save_nn(predict_everything, 20, type = "lstm")
# Retrieve summarized error metrics from the neural net training process
error_metrics_nn <- function(nnPredictLIst) {
resdf <- data.frame(matrix(ncol = 3, nrow = length(nnPredictLIst)))
for (i in seq_len(length(nnPredictLIst))) {
test <- nnPredictLIst[[i]]$test
train <- nnPredictLIst[[i]]$train
forc <- nnPredictLIst[[i]]$forc
MASE_scaling_factor <- MASE_scaling_factor(train)
#MASE
resdf[i, 1] <- calculate_mase(test, train, forc, MASE_scaling_factor)
#RMSSE
resdf[i, 2] <- calculate_rmsse(test, train, forc, MASE_scaling_factor)
#MdASE
resdf[i, 3] <- calculate_mdase(test, train, forc, MASE_scaling_factor)
}
names(resdf) <- c("MASE", "RMSSE", "MdASE")
return(resdf)
}
ppp <- error_metrics_nn(predict_everything)
View(ppp)
View(mlp_runs)
# Add a column with the lag at which training has been conducted
mlp_runs <- add_lag(mlp_runs)
# Add a column with the lag at which training has been conducted
mlp_runs <- add_lag(mlp_runs, lags)
View(mlp_runs)
length(mlp_runs[[1]])
length(lags)
View(mlp_runs)
View(lstm_gridsearch)
lags_mlp <- c(2,4,7,10,14)
# Create Vector of lags to train on the networks
lags_lstm <- c(2,4,7,14)
lags_mlp <- c(2,4,7,10,14)
rm(lags)
# Add a column with the lag at which training has been conducted
mlp_runs <- add_lag(mlp_runs, lags_mlp)
# Extract the best run from the tuning runs
mlp_best_runs <- get_best_runs(mlp_runs)
View(mlp_best_runs)
# Extract the hyperparameters that yielded the best runs
mlp_best_flags <- extract_flags(mlp_best_runs)
View(mlp_best_flags)
train_and_predict <- function(series, flags, out.sample, network.type) {
pred_out <- list()
for (i in seq_len(length(series))) {
# Preprocess the data
processed <- pre_process(series[[i]],flags[[i]]$Lag, out.sample)
if (network.type == "lstm") {
#Train the network
trained <- do_train_lstm(processed, flags[[i]])
# Reshape test array
x.test.arr <- array(processed$test$x.test[[1]],
dim = c(nrow(processed$test$x.test[[1]]),
ncol(processed$test$x.test[[1]]), 1))
# Predict
predicted <- trained$model %>%
predict(x.test.arr) %>%
.[,1]
}
else if (network.type == "mlp") {
trained <- do_train_mlp(processed, flags[[i]])
# Predict
predicted <- trained$model %>%
predict(processed$test$x.test[[1]]) %>%
.[,1]
}
else {
stop("wrong network type")
}
scale_history <- processed$history$scale.history
center_history <- processed$history$center.history
pred_out[[i]] <- list(
forc = exp(predicted * scale_history + center_history),
train = exp(processed$train$y.train[[1]] * scale_history + center_history),
test = exp(processed$test$y.test[[1]] * scale_history + center_history)
)
}
return(pred_out)
}
predict_everything_mlp <- train_and_predict(ts_list, mlp_best_flags,7,"mlp")
do_train_mlp <- function(data, flags) {
mlp_model <- keras_model_sequential()
mlp_model %>%
layer_dense(units = flags$flag_dense.units,
input_shape = dim(x.train)[2]) %>%
layer_activation_relu(negative_slope = flags$flag_neg.slope) %>%
layer_dense(units = flags$flag_dense.units) %>%
layer_activation_relu(negative_slope = flags$flag_neg.slope) %>%
layer_dense(units = 1)
mlp_model %>%
compile(
loss = "mse",
optimizer = optimizer_adam(lr = 0.001)
)
# Training & Eval ------------------------------
history <- mlp_model %>% fit(
data$train$x.train, data$train$y.train,
epochs = 100,
verbose = 2,
callback = callback_early_stopping(monitor = "val_loss",
patience = 10),
validation_split = flags$flag_val.split
)
return(list(model = mlp_model, history = history))
}
predict_everything_mlp <- train_and_predict(ts_list, mlp_best_flags,7,"mlp")
do_train_mlp <- function(data, flags) {
mlp_model <- keras_model_sequential()
mlp_model %>%
layer_dense(units = flags$flag_dense.units,
input_shape = dim(data$train$x.train)[2]) %>%
layer_activation_relu(negative_slope = flags$flag_neg.slope) %>%
layer_dense(units = flags$flag_dense.units) %>%
layer_activation_relu(negative_slope = flags$flag_neg.slope) %>%
layer_dense(units = 1)
mlp_model %>%
compile(
loss = "mse",
optimizer = optimizer_adam(lr = 0.001)
)
# Training & Eval ------------------------------
history <- mlp_model %>% fit(
data$train$x.train, data$train$y.train,
epochs = 100,
verbose = 2,
callback = callback_early_stopping(monitor = "val_loss",
patience = 10),
validation_split = flags$flag_val.split
)
return(list(model = mlp_model, history = history))
}
predict_everything_mlp <- train_and_predict(ts_list, mlp_best_flags,7,"mlp")
debugonce(train_and_predict)
predict_everything_mlp <- train_and_predict(ts_list, mlp_best_flags,7,"mlp")
View(data)
data$train$y.train
data$train$y.train[[1]]
debugonce(train_and_predict)
predict_everything_mlp <- train_and_predict(ts_list, mlp_best_flags,7,"mlp")
dim(data$train$x.train)
dim(data$train$x.train[[1]])
do_train_mlp <- function(data, flags) {
mlp_model <- keras_model_sequential()
mlp_model %>%
layer_dense(units = flags$flag_dense.units,
input_shape = dim(data$train$x.train[[1]])[2]) %>%
layer_activation_relu(negative_slope = flags$flag_neg.slope) %>%
layer_dense(units = flags$flag_dense.units) %>%
layer_activation_relu(negative_slope = flags$flag_neg.slope) %>%
layer_dense(units = 1)
mlp_model %>%
compile(
loss = "mse",
optimizer = optimizer_adam(lr = 0.001)
)
# Training & Eval ------------------------------
history <- mlp_model %>% fit(
data$train$x.train[[1]], data$train$y.train[[1]],
epochs = 100,
verbose = 2,
callback = callback_early_stopping(monitor = "val_loss",
patience = 10),
validation_split = flags$flag_val.split
)
return(list(model = mlp_model, history = history))
}
predict_everything_mlp <- train_and_predict(ts_list, mlp_best_flags,7,"mlp")
qqq <- error_metrics_nn(predict_everything_mlp)
View(qqq)
plot_save_nn(predict_everything_mlp,20,"mlp")
View(ppp)
