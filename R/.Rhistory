setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Create new environment to source the helper functions into.
# This avoids the .GlobalEnv to get too crowded.
funcEnv <- new.env()
# Vector with paths to the files to be sourced.
script_sources <- c("./import_pre-transforms.R",
"./descriptives.R",
"./auxf/helper.R",
"./exp_smoothing.R",
"./auxf/plotting.R",
"./ARIMA.R",
"./neural-nets.R")
# Source the functions and variables into the funcEnv
invisible(lapply(script_sources, source, local = funcEnv))
# Attach the environment to the search path
attach(funcEnv)
# Tidy up
rm(funcEnv, list_of_packages, script_sources)
# Log_ transform for the indices
log_indices = lapply(ts_list,log)
plot(log_indices$CAC40)
plot(log_indices$CAC40, type = "l")
constInt <- log_indices$CAC40[1]
diff <- diff(log_indices$CAC40)
undiff <- diffinv(diff, xi = const_int)
?undiff
?diffinv
undiff <- diffinv(diff, xi = c(const_int))
undiff <- diffinv(diff, xi = log_indices$CAC40)
length(const_int)
undiff <- diffinv(diff, xi = as.integer(const_int))
c(const_int)
undiff <- diffinv(diff, xi = constInt)
plot(log_indices$CAC40, type = "l")
lines(undiff, type = "l")
head(diff_list$CAC40)
library(rugarch)
autoarfima(diff_list$CAC40, ma.max = 4, ar.max = 4, method = "full", criterion = "BIC")
######################################################################
#                         ARIMA
######################################################################
cl <- makeCluster(mc_cores)
autoarfima(diff_list$CAC40, ma.max = 4, ar.max = 4, method = "full", criterion = "BIC", distribution.model = "sstd", cluster = cl)
arima_sstd <- lapply(diff_list, autoarfima, ar.max = 5, ma.max = 5,
mehtod = "full", distribution.model = "sstd", cirterion = "BIC")
arima_sstd <- lapply(diff_list, autoarfima, ar.max = 5, ma.max = 5,
method = "full", distribution.model = "sstd", criterion = "BIC", cluster = cl)
View(arima_sstd)
arima_sstd$CAC40
arima_sstd$DAX
arima_sstd$NIFTY50
arima_sstd$KOSPI
arima_sstd$BOVESPA
plot(arima_sstd$DAX$fit@fit$residuals, type  = "l")
# Create training and testing sets
train_test_arima_std <- make_training_and_testing_sets(diff_list, OUT_SAMPLE)
const_int
const_int[1]
constInt
# Global forecast horizon
OUT_SAMPLE <- 7
# Create training and testing sets
train_test_arima_std <- make_training_and_testing_sets(diff_list, OUT_SAMPLE)
View(train_test_arima_std)
sstd_resid <- lapply(arima_sstd, residuals)
View(sstd_resid)
sstd_resid <- lapply(arima_sstd, function(x) return(x$fit@fit$residuals))
View(sstd_resid)
rm(arima_sstd)
arima_sstd <- lapply(train_test_arima_std$train, autoarfima, ar.max = 5, ma.max = 5,
method = "full", distribution.model = "sstd", include.mean = F,
criterion = "BIC", cluster = cl)
# Extract residuals
sstd_resid <- lapply(arima_sstd, function(x) return(x$fit@fit$residuals))
# Forecast skew t arima
arima_sstd_forecast <- lapply(arima_sstd, arfimaforecast, n.ahead = 7)
# Forecast skew t arima
arima_sstd_forecast <- sapply(arima_sstd, arfimaforecast, n.ahead = 7)
f <- arfimaforecast(arima_sstd$CAC40, n.ahead = 7)
# Forecast skew t arima
arima_sstd_forecast <-lapply(arima_sstd,
function(x) return(arfimaforecast(x[[1]],
n.ahead = OUT_SAMPLE)))
View(arima_sstd_forecast)
# Ljung-Box test for the arima_sstd residuals
sstd_ljungBox <- lapply(sstd_resid, Box.test, type = "L", lag = 1)
sstd_ljungBox_summary <- data.frame(matrix(ncol = 3, nrow = length(names_complete)))
sstd_ljungBox_summary[,1] <- names_complete
for (i in seq_len(length(names_complete))) {
sstd_ljungBox_summary[i,2] <- ssdt_ljungBox[[i]]$statistic
sstd_ljungBox_summary[i,3] <- sstd_ljungBox[[i]]$p.value
}
# Ljung-Box test for the arima_sstd residuals
sstd_ljungBox <- lapply(sstd_resid, Box.test, type = "L", lag = 1)
sstd_ljungBox_summary <- data.frame(matrix(ncol = 3, nrow = length(names_complete)))
sstd_ljungBox_summary[,1] <- names_complete
for (i in seq_len(length(names_complete))) {
sstd_ljungBox_summary[i,2] <- sstd_ljungBox[[i]]$statistic
sstd_ljungBox_summary[i,3] <- sstd_ljungBox[[i]]$p.value
}
names(arima_ljungBox_summary) <- c("Index", "Test statistic", "p.value")
names(sstd_ljungBox_summary) <- c("Index", "Test statistic", "p.value")
View(sstd_ljungBox_summary)
qqnorm(sstd_resid$CAC40)
qqnorm(sstd_resid$DAx)
qqnorm(sstd_resid$DAX)
# Function for extracting the forecasts from a rugarch forecast class, glue
# them to the original series and writing them into a list.
sstd_extract <- function(rugarchForecast, trainingData) {
result <- list()
for (i in seq_len(length(rugarchForecast))) {
result[[i]] <- c(trainingData[[i]], rugarchForecast[[i]]@forecast$seriesFor)
}
return(result)
}
# Extract the forecasts and stitch them back to the series
stitched_sstd <- sstd_extract(arima_sstd_forecast, train_test_arima_std)
# Extract the forecasts and stitch them back to the series
stitched_sstd <- sstd_extract(arima_sstd_forecast, train_test_arima_std$train)
View(stitched_sstd)
# Retransform the stichted-together series
sstd_retransform <- lapply(stitched_sstd, diffinv, xi = const_int)
# Function for extracting the forecasts from a rugarch forecast class, glue
# them to the original series and writing them into a list.
sstd_retransform <- function(rugarchForecast, trainingData, const_int) {
result <- list()
for (i in seq_len(length(rugarchForecast))) {
stitched <- c(trainingData[[i]], rugarchForecast[[i]]@forecast$seriesFor)
result[[i]] <- diffinv(stitched, xi = const_int[i])
}
return(result)
}
# Extract the forecasts, stitch them back to the series, and un-difference
sstd_retransformed <- sstd_retransform(arima_sstd_forecast, train_test_arima_std$train, const_int)
View(sstd_retransformed)
ts_list
sstd_retransformed <- lapply(sstd_retransform, exp)
View(sstd_retransformed)
xxx <- exp(sstd_retransformed)
xxx <- exp(sstd_retransformed[[i]])
xxx <- exp(sstd_retransformed[[1]])
# Function for extracting the forecasts from a rugarch forecast class, glue
# them to the original series and writing them into a list.
sstd_retransform <- function(rugarchForecast, trainingData, const_int) {
result <- list()
for (i in seq_len(length(rugarchForecast))) {
stitched <- c(trainingData[[i]], rugarchForecast[[i]]@forecast$seriesFor)
result[[i]] <- exp(diffinv(stitched, xi = const_int[i]))
}
return(result)
}
# Extract the forecasts, stitch them back to the series, and un-difference
sstd_retransformed <- sstd_retransform(arima_sstd_forecast, train_test_arima_std$train, const_int)
View(sstd_retransformed)
tail(1:10,-1)
head(1:10,-1)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
View(train_test_arima_std)
testSet_sstd <- make_training_and_testing_sets(ts_list)$test
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
20,
"./img/arima_forecast/sstd"
)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
20,
"./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
debugonce(plot_save_forecast)
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
debugonce(plot_save_forecast)
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
debugonce(plot_save_forecast)
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
debugonce(plot_save_forecast)
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
testSet_sstd <- make_training_and_testing_sets(ts_list, OUT_SAMPLE)$test
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
debugonce(plot_save_forecast)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
source('~/Dropbox/Uni/Masterarbeit/Master_thesis/R/auxf/plotting.R', echo=TRUE)
# Plotting and saving
plot_save_forecast(
seriesWithForc = sstd_retransformed,
testset = testSet_sstd,
window = 20,
path = "./img/arima_forecast/sstd",
n.ahead = OUT_SAMPLE
)
auto_arima_list <- readRDS("./_objects/arima_fit.rds")
View(auto_arima_list)
class(auto_arima_list[[1]])
class(auto_arima_list[[1]]) == "forecast_ARIMA"
class(auto_arima_list[[1]])[1] == "forecast_ARIMA"
?any
any(class(auto_arima_list[[1]]) == "forecast_ARIMA")
View(arima_sstd_forecast)
View(arima_sstd_forecast)
xxx <- lapply(arima_sstd_forecast, function(x) return(x@forecast$seriesFor))
View(xxx)
View(sstd_retransformed)
?tail
# Extract only the forecast values
sstd_plain_forecast <- lapply(sstd_retransformed, tail, n = OUT_SAMPLE)
View(sstd_plain_forecast)
# Write error metrics into data frame
arima_sstd_error <- error_metrics_arima(
sstd_plain_forecast,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$test,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$train
)
debugonce(error_metrics_arima)
# Write error metrics into data frame
arima_sstd_error <- error_metrics_arima(
sstd_plain_forecast,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$test,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$train
)
# Get Error metrics for forecast values.
error_metrics_arima <- function(forecasts, testsets, trainsets) {
resdf <- data.frame(matrix(ncol = 3, nrow = length(forecasts)))
for (entry in seq_len(length(forecasts))) {
test <- testsets[[entry]]
train <- trainsets[[entry]]
if (any(class(forecasts) == "forecast_ARIMA")) {
forc <- forecasts[[entry]]$mean
}
else {
forc <- forcasts[[entry]]
}
MASE_scaling_factor <- MASE_scaling_factor(train)
#MASE
resdf[entry, 1] <- calculate_mase(test, train, forc, MASE_scaling_factor)
#RMSSE
resdf[entry, 2] <- calculate_rmsse(test, train, forc, MASE_scaling_factor)
#MdASE
resdf[entry, 3] <- calculate_mdase(test, train, forc, MASE_scaling_factor)
}
names(resdf) <- c("MASE", "RMSSE", "MdASE")
return(resdf)
}
# Write error metrics into data frame
arima_sstd_error <- error_metrics_arima(
sstd_plain_forecast,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$test,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$train
)
# Write error metrics into data frame
arima_sstd_error <- error_metrics_arima(
forecasts = sstd_plain_forecast,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$test,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$train
)
debugonce(error_metrics_arima)
# Write error metrics into data frame
arima_sstd_error <- error_metrics_arima(
forecasts = sstd_plain_forecast,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$test,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$train
)
# Get Error metrics for forecast values.
error_metrics_arima <- function(forecasts, testsets, trainsets) {
resdf <- data.frame(matrix(ncol = 3, nrow = length(forecasts)))
for (entry in seq_len(length(forecasts))) {
test <- testsets[[entry]]
train <- trainsets[[entry]]
if (any(class(forecasts) == "forecast_ARIMA")) {
forc <- forecasts[[entry]]$mean
}
else {
forc <- forecasts[[entry]]
}
MASE_scaling_factor <- MASE_scaling_factor(train)
#MASE
resdf[entry, 1] <- calculate_mase(test, train, forc, MASE_scaling_factor)
#RMSSE
resdf[entry, 2] <- calculate_rmsse(test, train, forc, MASE_scaling_factor)
#MdASE
resdf[entry, 3] <- calculate_mdase(test, train, forc, MASE_scaling_factor)
}
names(resdf) <- c("MASE", "RMSSE", "MdASE")
return(resdf)
}
# Write error metrics into data frame
arima_sstd_error <- error_metrics_arima(
forecasts = sstd_plain_forecast,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$test,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$train
)
View(arima_sstd_error)
# Training and testing sets for ARIMA estimation
train_test_arima <- make_training_and_testing_sets(
log_indices,
OUT_SAMPLE
)
# Forecast the ARIMA models based on their respective models
arima_forecast <- mclapply(
auto_arima_list, forecast,
h = OUT_SAMPLE,
mc.cores = mc_cores
)
# Plotting the forecasts and saving them
plot_save_forecast(
arima_forecast,
train_test_arima$test,
20,
"./img/arima_forecast/norm"
)
arima_sstd_error <- bind_cols(
names_complete,
arima_sstd_error
)
# Write error metrics into data frame
arima_sstd_error <- error_metrics_arima(
forecasts = sstd_plain_forecast,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$test,
make_training_and_testing_sets(ts_list, OUT_SAMPLE)$train
)
arima_sstd_error <- bind_cols(
Index = names_complete,
arima_sstd_error
)
View(arima_sstd_error)
# Error metrics
arima_error <- error_metrics_arima(
arima_forecast,
train_test_arima$test,
train_test_arima$train
)
# Naming the forecast table for better intuition
arima_error <- bind_cols(
Index = names_complete,
arima_error
)
# Error metrics
arima_error <- error_metrics_arima(
arima_forecast,
train_test_arima$test,
train_test_arima$train
)
debugonce(error_metrics_arima)
# Error metrics
arima_error <- error_metrics_arima(
arima_forecast,
train_test_arima$test,
train_test_arima$train
)
class(forecasts)
class(forecasts[[1]])
View(forecasts)
View(arima_forecast)
View(arima_sstd_forecast)
# Get Error metrics for forecast values.
error_metrics_arima <- function(forecasts, testsets, trainsets) {
resdf <- data.frame(matrix(ncol = 3, nrow = length(forecasts)))
for (entry in seq_len(length(forecasts))) {
test <- testsets[[entry]]
train <- trainsets[[entry]]
if (any(class(forecasts[[1]]) == "forecast")) {
forc <- forecasts[[entry]]$mean
}
else {
forc <- forecasts[[entry]]
}
MASE_scaling_factor <- MASE_scaling_factor(train)
#MASE
resdf[entry, 1] <- calculate_mase(test, train, forc, MASE_scaling_factor)
#RMSSE
resdf[entry, 2] <- calculate_rmsse(test, train, forc, MASE_scaling_factor)
#MdASE
resdf[entry, 3] <- calculate_mdase(test, train, forc, MASE_scaling_factor)
}
names(resdf) <- c("MASE", "RMSSE", "MdASE")
return(resdf)
}
# Error metrics
arima_error <- error_metrics_arima(
arima_forecast,
train_test_arima$test,
train_test_arima$train
)
# Naming the forecast table for better intuition
arima_error <- bind_cols(
Index = names_complete,
arima_error
)
View(arima_error)
